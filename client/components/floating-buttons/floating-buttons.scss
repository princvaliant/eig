/*------------------------------------*\
    #SETTINGS | Variables
\*------------------------------------*/

/* COLORS ----------------------------*/

// the main/primary color
$main-color: #E40A5D;
// aka the white text
$bright-text: rgba(255, 255, 255, 0.8);

/* SPEEDS ----------------------------*/

// the speed of the inflation of each button after hovering on the main button
$delay-staggering-inflate: 0.1s;
// when hovering on the main button the child buttons slide into view
$slide-speed: .5s;
// the labels disappear at this speed on mouse out
$label-hover-off: .5s;
// the labels appear at this speed on mouse over
$label-hover-on: .3s;

/* SIZES -----------------------------*/

// main button diameter
$main_button_size: 56px;
// main button diameter
$child_button_size: 56px;
// the distance of the main button from the closest corners of the screen
$border-distance: 30px;
// font-size for labels
$labels-font-size: 13px;
// top & bottom padding for the labels
$labels-padding-vertical: 4px;
// left & right padding for the labels
$labels-padding-horizontal: 10px;

/* OTHER VARIABLES -------------------*/

// how many child buttons does the component have
$number-of-child-buttons: 4;

/*------------------------------------*\
    #BASE | Raw styles
\*------------------------------------*/

/**
 * The very core styling of the button.
 * These styles are shared by every instance of the button.
 * Styles placed here should NOT care about placement in the screen,
 * options chosen by the user or state of the button.
 */

.mfb-component{
  box-sizing: border-box; // A better box-sizing
  margin: $border-distance;
  margin-bottom: $border-distance + 40;
  position: fixed;
  white-space: nowrap;
  z-index: 30;
  // this padding is needed really only if the element is an <ul>
  // otherwise it can probably be ditched.
  padding-left: 0;
  list-style: none;
}

// make sure that everything inside this component
// inherits the same box-sizing
.mfb-component{
  *, *:before, *:after {
    box-sizing: inherit;
  }
}


/*------------------------------------*\
    #BASE | Modifiers
\*------------------------------------*/
/**
 * These styles depends on the placement of the button.
 * Styles can be:
 * 1. Top-left:  modified by the " --tl " suffix.
 * 2. Top-right: modified by the " --tr " suffix.
 * 3. Bottom-left:  modified by the " --bl " suffix.
 * 4. Bottom-right: modified by the " --br " suffix.
 */

.mfb-component--tl{
  @extend .mfb-component;
  left: 0; top: 0;
}
.mfb-component--tr{
  @extend .mfb-component;
  right: 0; top: 0;
}
.mfb-component--bl{
  @extend .mfb-component;
  left: 0; bottom: 0;
}
.mfb-component--br{
  @extend .mfb-component;
  right: 0; bottom: 0;
}


/*------------------------------------*\
    #BUTTONS | Base
\*------------------------------------*/

.mfb-component__button{
  background-color: $main-color;
  display: inline-block;
  position: relative;
  border: none;
  border-radius: 50%;
  box-shadow: 0 0 4px rgba(0,0,0,.14),0 4px 8px rgba(0,0,0,.28);
  cursor: pointer;
  outline: none;
  padding: 0;
  position: relative;
  -webkit-user-drag: none;
  font-weight: bold;
  color: #f1f1f1;
}

/**
 * This is the unordered list for the list items that contain
 * the child buttons.
 *
 */
.mfb-component__list{
  list-style: none;
  margin: 0;
  padding: 0;
  &>li{
    display: block;
    position: absolute;
    top: 0;

    padding: 10px 0;
    margin: -10px 0;
  }
}

/**
 * This is the basic styles for all the icons inside the main button
 */
.mfb-component__icon{
  position: absolute;
  font-size: 18px;
  text-align: center;
  line-height: 56px;
  width: 100%;
}

.mfb-component__wrap{
  // this double declaration adds some padding to the main button
  // to expand the area that triggers the hover state. The equal, negative
  // margin evens out the distance form the borders so that the button
  // does not shift out of position.
  padding: $border-distance;
  margin: -$border-distance;
}
.mfb-component:hover{
  .mfb-component__icon {
    -webkit-transform: scale(1) rotate(0deg);
    transform: scale(1) rotate(0deg);
  }
}


/*------------------------------------*\
    #BUTTONS | Modifiers
\*------------------------------------*/

.mfb-component__button--main{
  @extend .mfb-component__button;
  height: $main_button_size;
  width: $main_button_size;
  z-index: 20;
}
.mfb-component__button--child{
  @extend .mfb-component__button;
  height: $child_button_size;
  width: $child_button_size;
}
// the icons for the main button
.mfb-component__main-icon--active,
.mfb-component__main-icon--resting{
  @extend .mfb-component__icon;
  -webkit-transform: scale(1) rotate(360deg);
  transform: scale(1) rotate(360deg);
  -webkit-transition: -webkit-transform 150ms cubic-bezier(.4,0,1,1);
  transition: transform 150ms cubic-bezier(.4,0,1,1);
}
// the icons for the main button
.mfb-component__child-icon,
.mfb-component__child-icon{
  @extend .mfb-component__icon;
}
.mfb-component__main-icon--active{
  opacity: 0;
}
.mfb-component:hover{
  .mfb-component__main-icon{
    -webkit-transform: scale(1) rotate(0deg);
    transform: scale(1) rotate(0deg);
  }
  .mfb-component__main-icon--resting{
    opacity: 0;
  }
  .mfb-component__main-icon--active{
    opacity: 1;
  }
}

/*------------------------------------*\
    #BUTTONS | Animations
\*------------------------------------*/

/**
 * FOUNTAIN
 * When hovering the main button the child buttons
 * jump into view from outside the viewport
 */

.mfb-component--tl.mfb-fountain,
.mfb-component--tr.mfb-fountain{
  .mfb-component__list{
    li{
      transform: scale(0);
    }
    @for $i from 1 through $number-of-child-buttons {
      $distance: -70px * $i;
      li:nth-child( #{$i} ) {
        transform: translateY($distance) scale(0);
        transition: all $slide-speed;
        // this is the delay at which the buttons start disappearing
        transition-delay: ( $number-of-child-buttons - $i ) * 0.05s;
      }
    }
  }
  &:hover{
    .mfb-component__list{
      @for $i from 1 through $number-of-child-buttons {
        $distance: 70px * $i;
        li:nth-child( #{$i} ) {
          transform: translateY($distance) scale(1);
          // this is the delay at which the buttons appear
          transition-delay: $i * 0.05s;
        }
      }
    }
  }
}

.mfb-component--bl.mfb-fountain,
.mfb-component--br.mfb-fountain{
  .mfb-component__list{
    li{
      transform: scale(0);
    }
    @for $i from 1 through $number-of-child-buttons {
      $distance: 70px * $i;
      li:nth-child( #{$i} ) {
        transform: translateY($distance) scale(0);
        transition: all $slide-speed;
        // this is the delay at which the buttons start disappearing
        transition-delay: ( $number-of-child-buttons - $i ) * 0.05s;
      }
    }
  }
  &:hover{
    .mfb-component__list{
      @for $i from 1 through $number-of-child-buttons {
        $distance: -70px * $i;
        li:nth-child( #{$i} ) {
          transform: translateY($distance) scale(1);
          // this is the delay at which the buttons appear
          transition-delay: $i * 0.05s;
        }
      }
    }
  }
}




/**
 * SLIDE IN + FADE
 * When hovering the main button, the child buttons slide out from beneath
 * the main button while transitioning from transparent to opaque.
 *
 */
.mfb-component--tl.mfb-slidein,
.mfb-component--tr.mfb-slidein{
  .mfb-component__list li{
    opacity: 0;
    transition: all $slide-speed;
  }
  &:hover{
    .mfb-component__list{
      li{
        opacity: 1;
      }
      @for $i from 1 through $number-of-child-buttons {
        $distance: 70px * $i;
        li:nth-child( #{$i} ) {
          -webkit-transform: translateY( $distance );
                  transform: translateY( $distance ); }
      }
    }
  }
}

.mfb-component--bl.mfb-slidein,
.mfb-component--br.mfb-slidein{
  .mfb-component__list li{
    opacity: 0;
    transition: all $slide-speed;
  }
  &:hover{
    .mfb-component__list{
      li{
        opacity: 1;
      }
      @for $i from 1 through $number-of-child-buttons {
        $distance: -70px * $i;
        li:nth-child( #{$i} ) { -webkit-transform: translateY( $distance );
                                       transform: translateY( $distance ); }
      }
    }
  }
}

/**
 * ZOOM-IN
 * When hovering the main button, the child buttons grow
 * from zero to normal size.
 *
 */

.mfb-component--tl.mfb-zoomin,
.mfb-component--tr.mfb-zoomin{
  .mfb-component__list{
    li{
      transform: scale(0);
    }
    @for $i from 1 through $number-of-child-buttons {
      $distance: 70px * $i;
      li:nth-child( #{$i} ) {
        transform: translateY($distance) scale(0);
        transition: all $slide-speed;
        // this is the delay at which the buttons start disappearing
        transition-delay: ( $number-of-child-buttons - $i ) * 0.05s;
      }
    }
  }
  &:hover{
    .mfb-component__list{
      @for $i from 1 through $number-of-child-buttons {
        $distance: 70px * $i;
        li:nth-child( #{$i} ) {
          transform: translateY($distance) scale(1);
          // this is the delay at which the buttons appear
          transition-delay: $i * 0.05s;
        }
      }
    }
  }
}

.mfb-component--bl.mfb-zoomin,
.mfb-component--br.mfb-zoomin{
  .mfb-component__list{
    li{
      transform: scale(0);
    }
    @for $i from 1 through $number-of-child-buttons {
      $distance: -70px * $i;
      li:nth-child( #{$i} ) {
        transform: translateY($distance) scale(0);
        transition: all $slide-speed;
        // this is the delay at which the buttons start disappearing
        transition-delay: ( $number-of-child-buttons - $i ) * 0.05s;
      }
    }
  }
  &:hover{
    .mfb-component__list{
      @for $i from 1 through $number-of-child-buttons {
        $distance: -70px * $i;
        li:nth-child( #{$i} ) {
          transform: translateY($distance) scale(1);
          // this is the delay at which the buttons appear
          transition-delay: $i * 0.05s;
        }
      }
    }
  }
}



/*------------------------------------*\
    #LABELS | base
\*------------------------------------*/

/**
 * These are the labels associated to each button,
 * exposed only when hovering the related button.
 * They are called labels but are in fact data-attributes of
 * each button (an anchor tag).
 */

[data-mfb-label]:after {
  content: attr(data-mfb-label);
  opacity: 0;
  transition: all $label-hover-off;
  background: rgba(0,0,0, .4);
  padding: $labels-padding-vertical $labels-padding-horizontal;
  border-radius: 3px;
  color: $bright-text;
  font-size: $labels-font-size;
  pointer-events: none;
  position: absolute;
  top: 50%;
  margin-top: - ($labels-padding-vertical + $labels-font-size / 2);
  transition: all $label-hover-off; // the label disappears at this speed
}
[data-mfb-label]:hover:after {
  content: attr(data-mfb-label);
  opacity: 1;
  transition: all $label-hover-on; // the label appears at this speed
}
/*------------------------------------*\
    #LABELS | Modifiers
\*------------------------------------*/
.mfb-component--br, .mfb-component--tr{
  [data-mfb-label]:after {
    content: attr(data-mfb-label);
    right: 70px;
  }
}
.mfb-component--tl, .mfb-component--bl{
  [data-mfb-label]:after {
    content: attr(data-mfb-label);
    left: 70px;
  }
}

/*------------------------------------*\
    #DEVELOPMENT | In development
\*------------------------------------*/
/**
 * This part is where unfinished code should stay.
 * When a feature is ready(sh) move these styles to their proper place.
 */



/*------------------------------------*\
    #DEVELOPMENT | Debuggers
\*------------------------------------*/

/**
 * These are mainly helpers for development. They do not have to end up
 * in production but it's handy to keep them when developing.
 */


/**
 * Apply this class to the html tag when developing the slide-in button
 */
html.mfb-slide-in{
  border-top: 5px solid teal;
}

html.mfb-debug *{
  border: 1px solid red;
}


.mfb-component--tl{
  animation: fromTop 1s 1;
  -webkit-animation: fromTop 1s 1;
}
.mfb-component--tr{
  animation: fromTop 1.3s 1;
  -webkit-animation: fromTop 1.3s 1;
}
.mfb-component--br{
  animation: fromBottom 1.6s 1;
  -webkit-animation: fromBottom 1.6s 1;
}
.mfb-component--bl{
  animation: fromBottom 1.9s 1;
  -webkit-animation: fromBottom 1.9s 1;
}
@keyframes fromBottom {
  0% {
    transform: translateY(250px);
  }
  100% {
    transform: translateY(0);
  }
}
@keyframes fromTop {
  0% {
    transform: translateY(-250px);
  }
  100% {
    transform: translateY(0);
  }
}
@-webkit-keyframes fromBottom {
  0% {
    transform: translateY(250px);
  }
  100% {
    transform: translateY(0);
  }
}
@-webkit-keyframes fromTop {
  0% {
    transform: translateY(-250px);
  }
  100% {
    transform: translateY(0);
  }
}
